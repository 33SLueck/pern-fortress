import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import {{pascalName}} from '../components/{{pascalName}}/{{pascalName}}';
import { vi } from 'vitest';

describe('{{pascalName}} Component', () => {
  it('renders with default props', () => {
    render(<{{pascalName}} />);
    
    expect(screen.getByText('{{pascalName}}')).toBeInTheDocument();
    expect(screen.getByText(/This is the {{pascalName}} component/)).toBeInTheDocument();
  });

  it('renders with custom title', () => {
    const customTitle = 'Custom Title';
    render(<{{pascalName}} title={customTitle} />);
    
    expect(screen.getByText(customTitle)).toBeInTheDocument();
  });

  it('renders children when provided', () => {
    const childText = 'Custom child content';
    render(
      <{{pascalName}}>
        <p>{childText}</p>
      </{{pascalName}}>
    );
    
    expect(screen.getByText(childText)).toBeInTheDocument();
    expect(screen.queryByText(/This is the {{pascalName}} component/)).not.toBeInTheDocument();
  });

  it('applies custom className', () => {
    const customClass = 'custom-class';
    render(<{{pascalName}} className={customClass} />);
    
    const component = screen.getByRole('button');
    expect(component).toHaveClass(customClass);
  });

  {{#if useHooks}}
  it('toggles active state on click', () => {
    render(<{{pascalName}} />);
    
    const component = screen.getByRole('button');
    
    // Initially inactive
    expect(screen.getByText(/Status: Inactive/)).toBeInTheDocument();
    expect(screen.getByText(/⭕/)).toBeInTheDocument();
    
    // Click to activate
    fireEvent.click(component);
    
    expect(screen.getByText(/Status: Active/)).toBeInTheDocument();
    expect(screen.getByText(/✅/)).toBeInTheDocument();
  });

  it('toggles active state on Enter key', () => {
    render(<{{pascalName}} />);
    
    const component = screen.getByRole('button');
    
    fireEvent.keyDown(component, { key: 'Enter' });
    
    expect(screen.getByText(/Status: Active/)).toBeInTheDocument();
  });

  it('toggles active state on Space key', () => {
    render(<{{pascalName}} />);
    
    const component = screen.getByRole('button');
    
    fireEvent.keyDown(component, { key: ' ' });
    
    expect(screen.getByText(/Status: Active/)).toBeInTheDocument();
  });
  {{/if}}

  it('calls onClick handler when provided', () => {
    const mockClick = vi.fn();
    render(<{{pascalName}} onClick={mockClick} />);
    
    const component = screen.getByRole('button');
    fireEvent.click(component);
    
    expect(mockClick).toHaveBeenCalledTimes(1);
  });
});
